<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timerAnimation = 0;
timerIntro = 0;
pPressed = 0;
showResult = 0;
zoomBGLevel = 0;
zoomFGLevel = 0;
fightComplete = 0;
pHasWon = 0;        //output reslts
bgBlend = c_white;
pX = 250;
eX = -250;

//set these when creating this object
eWeap = 1;          //enemy weapon
timerAllowedMax = 5 * room_speed;   //input time
timerAllowed = timerAllowedMax;
//playerHP = 100;
pWeap = -1;          //player weapon choice
pSpr = sprLance;   //player sprite
eSpr = sprArcher;     //enemy sprite //spr_Barb //sprArcher


surf = surface_create(view_wview + 200, view_hview + 200);

ssize = shader_get_uniform(shader1,"size");//uniform for width, height, radius
spos=shader_get_uniform(shader1,"pos");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//animation timer
var zoomTime = 15;

if timerIntro &gt; 0 and timerAllowed&gt;0 {
    shader_set(shader0);
    shader_set(shader1);
    //shader_set_uniform_f(s1, (400) / room_width, (/*view_yview +*/ view_hview / 2) / room_height);
    //shader_set_uniform_f(s1, 200 / room_width,200/ room_height);
    
    shader_set(shader1)
    shader_set_uniform_f(spos,200 / room_width,200/ room_height);
    shader_set_uniform_f(ssize,1000,1000,20)//width,height,radius

    }
draw_sprite_ext(sprGrass, 0, view_xview + view_wview / 2, view_yview + view_hview / 2, zoomBGLevel, zoomBGLevel, 3 + (zoomTime - timerIntro) / 50, bgBlend, image_alpha);
shader_reset();

surface_set_target(surf);
draw_clear_alpha(c_black,0);
draw_background_ext(backGround, 0, view_yview + 360 + 50, 1, 1, 1, bgBlend, 1);
draw_sprite(eSpr, 0, view_xview + view_wview / 2 + eX, view_yview + view_hview / 2 + 50)
draw_sprite_ext(pSpr, 0, view_xview + view_wview / 2 + pX, view_yview + view_hview / 2 + 50, -1, 1, 0, c_white, 1)
surface_reset_target();

if surface_exists(surf) {
    if timerIntro &lt; room_speed * 8 {
        draw_surface_ext(surf, 0-(zoomTime - timerIntro)/10 - timerIntro/5, 0-(zoomTime - timerIntro)*0, zoomFGLevel, zoomFGLevel, 3 + (zoomTime - timerIntro) / 50, c_white, image_alpha);
        } else {
        draw_surface_ext(surf, -46.5, 0, 1.192, 1.192, 5 - 9.3, c_white, image_alpha);
        }
    }
    
draw_background_ext(background1, view_xview, view_yview, 1, 1, 0, c_white, image_alpha);
    
/*draw_sprite_ext(eSpr,0,view_xview+150,view_yview+view_hview/2-(zoomTime - timerIntro)/50,zoomFGLevel,zoomFGLevel,(zoomTime - timerIntro)/50,c_white,1)
draw_sprite_ext(pSpr,0,view_xview+view_wview-150,view_yview+view_hview/2,-zoomFGLevel,zoomFGLevel,0,c_white,1)*/
    
if timerIntro &lt; zoomTime {
    zoomBGLevel = timerIntro / zoomTime;
    zoomFGLevel = zoomBGLevel
    }

//press a button
if timerAllowed &gt; 0 and pPressed == 0 {
    timerIntro += 1;
    if timerIntro &gt; zoomTime {
        scrDrawUI();
        draw_sprite(sprDraw, 0, view_xview + view_wview / 2, view_yview + view_hview / 2 - 100);
        draw_set_colour(c_dkgray);
        draw_rectangle(view_xview + view_wview / 2 - 100, view_yview + 320, view_xview + view_wview / 2 + 100, view_yview + 340, false);
        draw_set_colour(c_red);
        draw_rectangle(view_xview + view_wview / 2 - 100, view_yview + 320, view_xview + view_wview / 2 - 100 + 200 * (timerAllowed / timerAllowedMax), view_yview + 340, false);
        timerAllowed -= 1;
        zoomBGLevel -= 0.002/20;
        zoomFGLevel += 0.002/5; //timerIntro / (2*zoomTime);
        
        if keyboard_check(ord("A")) {
            pWeap = 0;
            pPressed = 1;
            }
        if keyboard_check(ord("S")) {
            pWeap = 1;
            pPressed = 1;
            }
        if keyboard_check(ord("D")) {
            pWeap = 2;
            pPressed = 1;
            }
        }
    }

//attack
if pPressed == 1 or timerAllowed &lt;= 0 {
    if eWeap - pWeap == 1 or (eWeap == 0 and pWeap ==2) or pWeap == -1 {
        pHasWon = 0;
        fightComplete = 1;
        } else {
        //ties count as winning for now
        pHasWon = 1;
        fightComplete = 1;
        }
    }
if fightComplete == 1 {
    timerAnimation += 1;
    if timerAnimation &lt; 60 {
        //play animation
        if pWeap &gt;= 0 {
            draw_sprite(sprWeap, pWeap, view_xview + 600, view_yview + 100);
            } else {
            draw_sprite(sprWeap, 3, view_xview + 600, view_yview + 100);
            }
        draw_sprite(sprWeap, eWeap, view_xview + 200, view_yview + 100);
        }
    if timerAnimation &gt;= 60 {
    draw_sprite(sprWinLose, pHasWon, view_xview + view_wview / 2, view_yview + view_hview / 2 - 100);
    if pHasWon == 0 {
        bgBlend = c_red;
        }
        if pHasWon {
            pX = -175;
            } else {
            eX = 175;
            }
        }
    if timerAnimation &gt;= 180 {
        image_alpha -= 0.1;
        }
    if timerAnimation &gt;= 200 {
        instance_destroy();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

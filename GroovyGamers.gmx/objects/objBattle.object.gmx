<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timerAnimation = 0;
timerIntro = 0;
pPressed = 0;
showResult = 0;
zoomBGLevel = 0;
zoomFGLevel = 0;
fightComplete = 0;
pHasWon = 0;        //output reslts
bgBlend = c_white;
pX = 300*2;
eX = -250*2;
pInd = 0;
eInd = 0;
 

//set these when creating this object
eWeap = 1;          //enemy weapon
timerAllowedMax = 5 * room_speed;   //input time
timerAllowed = timerAllowedMax;
//playerHP = 100;
pWeap = -1;          //player weapon choice
pSpr = sprLancer;   //player sprite0.
eSpr = choose(sprLancer,sprSword,sprArcher);     //enemy sprite


surf = surface_create(view_wview + 200, view_hview + 200);

ssize = shader_get_uniform(shader1,"size");//uniform for width, height, radius
spos=shader_get_uniform(shader1,"pos");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//animation timer
var zoomTime = 15;

if timerIntro &gt; 0 and timerAnimation &lt; 60 {
    shader_set(shader0);
    shader_set(shader1);
    shader_set_uniform_f(spos, 200 / room_width,150/ room_height);
    shader_set_uniform_f(ssize, 0.01 + 0.1 * (1.0 - 1.0 * (timerAllowed / timerAllowedMax)));

    }
draw_sprite_ext(sprGrass, 0, view_xview + view_wview / 2, view_yview + view_hview / 2, zoomBGLevel * 2.5, zoomBGLevel * 2.5, 3 + (zoomTime - timerIntro) / 50, bgBlend, image_alpha);
shader_reset();

surface_set_target(surf);
draw_clear_alpha(c_black,0);
draw_background_ext(backGround, 0, view_yview + 650, 2.5, 2.5, 1, bgBlend, 1);
draw_sprite(eSpr, eInd, view_xview + view_wview / 2 + eX, view_yview + view_hview / 2 + 100)
draw_sprite_ext(pSpr, pInd, view_xview + view_wview / 2 + pX, view_yview + view_hview / 2 + 100, -1, 1, 0, c_white, 1)
surface_reset_target();

if surface_exists(surf) {
    if timerIntro &lt; room_speed * 8 {
        draw_surface_ext(surf, 0-2*(zoomTime - timerIntro)/10 - timerIntro/5, (zoomTime - timerIntro) / 2 + 150, zoomFGLevel, zoomFGLevel, 3 + (zoomTime - timerIntro) / 50, c_white, image_alpha);
        } else {
        draw_surface_ext(surf, -46.5, 0, 1.192, 1.192, 5 - 9.3, c_white, image_alpha);
        }
    }
    
draw_background_ext(background1, view_xview, view_yview, 1, 1, 0, c_white, image_alpha);
 
if timerIntro &lt; zoomTime {
    zoomBGLevel = timerIntro / zoomTime;
    zoomFGLevel = zoomBGLevel;
    }

//press a button
if timerAllowed &gt; 0 and pPressed == 0 {
    timerIntro += 1;
    if timerIntro &gt; zoomTime {
        scrDrawUI();
        pInd += 0.1;
        if pInd &gt;= 2.5 {
            pInd = 0;
            }
        eInd = pInd;
        draw_sprite(sprSpeedLines, -1, view_xview + view_wview / 2, view_yview + view_hview / 2);
        draw_sprite_ext(sprDraw, 0, view_xview + view_wview / 2, view_yview + view_hview / 2 - 250, 0.75, 0.75, 0, c_white, 1);
        draw_set_colour(c_black);
        draw_rectangle(view_xview + view_wview / 2 - 150, view_yview + 500, view_xview + view_wview / 2 + 150, view_yview + 530, false);
        draw_set_colour(c_orange);
        draw_rectangle(view_xview + view_wview / 2 - 150, view_yview + 500, view_xview + view_wview / 2 - 150 + 300 * (timerAllowed / timerAllowedMax), view_yview + 530, false);
        timerAllowed -= 1;
        zoomBGLevel -= 0.002/20;
        zoomFGLevel += 0.002/5; //timerIntro / (2*zoomTime);
        /*
        if keyboard_check(ord("A")) { //lance
            pWeap = 0;
            pPressed = 1;
            }
        if keyboard_check(ord("S")) { //sword
            pWeap = 1;
            pPressed = 1;
            }
        if keyboard_check(ord("D")) { //bow % arrow
            pWeap = 2;
            pPressed = 1;
            }
            */
        }
    }

//attack
if pPressed == 1 or timerAllowed &lt;= 0 {
    if eWeap - pWeap == 1 or (eWeap == 0 and pWeap == 2) or pWeap == -1 {
        pHasWon = 0;
        fightComplete = 1;
        } else {
        //ties count as winning for now
        pHasWon = 1;
        fightComplete = 1;
        }
    }
if fightComplete == 1 {
    timerAnimation += 1;
    if timerAnimation &lt; 60 {
        //play animation
        if pWeap &gt;= 0 {
            draw_sprite(sprWeap, pWeap, view_xview + 1980 - 300, view_yview + 100);
            } else { //CORY'S Code doesn't allow for too late stuff anymore.
            draw_sprite(sprWeap, 3, view_xview + 1980 - 300, view_yview + 100); //sub image was 3
            draw_sprite(sprWinLose, 2, view_xview + view_wview / 2, view_yview + view_hview / 2 - 250);
            //room_goto(rm_map0);
            }
        draw_sprite(sprWeap, eWeap, view_xview + 300, view_yview + 100);
        }
    if timerAnimation &gt;= 60 &amp;&amp; timerAnimation &lt; 70 {
        draw_set_colour(c_white);
        draw_set_alpha(0.8 - ((timerAnimation-60) / 10));
        draw_rectangle(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, false);
        draw_set_alpha(1);
        }
    if timerAnimation &gt;= 60 {
        draw_sprite(sprWinLose, pHasWon, view_xview + view_wview / 2, view_yview + view_hview / 2 - 250);
        //room_goto(rm_map0);
        if pHasWon == 0 {
            bgBlend = c_dkgray;
            }
        if pHasWon { //WIN
            if pSpr != sprArcher {
                pX = -175;
                } else {
                draw_sprite_ext(spr_Arrow,0,view_xview + view_wview / 2, view_yview + view_hview / 2 + eX + 150,  view_yview + view_hview / 2 - 50, 1, 0, c_white, 1);
                }
            }
            
            pInd = 3; //was 3?
            eInd = 5; //was 5?
            } else {
            if pSpr != sprArcher {
                eX = 175;
                } else {
                draw_sprite_ext(spr_Arrow,0,view_xview + view_wview / 2, view_yview + view_hview / 2 + pX - 150,  view_yview + view_hview / 2 - 50, 1, 0, c_white, 1);
                }
            eX = 175;
            pInd = 5; //was 5?
            eInd = 3; //was 3?
            }
        }
        
        
        
        
        
    if timerAnimation &gt;= 150 {
        if pHasWon {
            pInd = 0;
            } else {
            eInd = 0;
            }
        }
        
    if timerAnimation &gt;= 180 {
        image_alpha -= 0.1;

        }
        
    if timerAnimation &gt;= 200 {
        if (pHasWon == 0)
        {
            global.playerHP -= 1;
        }
        

        instance_destroy();
        room_goto(rm_map0);
        
        if (eSpr == spr_gargoyle)
        {
            room_goto(rm_closing);
        }
        
        
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
